{"version":3,"sources":["components/ScrollBar.js","components/World.js","VisualizeApp.js","seatGeakRequestHandler.js","inputSanitizer.js","artistSearch.js","App.js","reportWebVitals.js","index.js"],"names":["ScrollBar","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this","react_default","a","createElement","className","props","items","map","item","ScrollBar_VenueItem","ticketLink","url","zoomFunc","date","datetime_local","venue","id","React","Component","VenueItem","_this2","call","openInNewTab","window","open","handleClick","bind","assertThisInitialized","location","lat","lon","_this3","Date","shortMonthName","Intl","DateTimeFormat","month","format","localClockTime","toLocaleString","hour","minute","hour12","monthName","onClick","name","city","state","getDay","World","polygonsMaterial","THREE","color","side","react_globe_gl_module","ref","worldRef","pathsData","points","showGlobe","showAtmosphere","polygonsData","polygons","polygonCapMaterial","pathPoints","pathPointLat","p","pathPointLng","pathDashGap","pathDashAnimateTime","pathDashLength","pathStroke","pathPointAlt","pathColor","path","backgroundColor","polygonSideColor","labelsData","labels","labelLat","label","labelLng","lng","labelText","labelSize","labelDotRadius","labelResolution","labelAltitude","labelColor","VisualizeApp","handleButtonPress","event","setState","text","handleButtonSubmit","events","eventsPathData","propsData","polygonData","eventsLabelData","resultErrorString","createRef","handleChange","handleSubmit","zoomToVenue","targetLocation","altitude","current","pointOfView","handlePolygonLoad","ScrollBar_ScrollBar","onSubmit","onChange","placeholder","World_World","eventData","pathData","cordData","labelData","lastLat","lastLon","i","length","push","coords","console","log","e","target","_handleSubmit","asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","preventDefault","stop","_x","_handleButtonSubmit","_callee2","queryString","response","globeData","_context2","abrupt","lowerCaseStrings","toLowerCase","split","result","cleanSentence","fetch","then","json","myJson","catch","err","sent","filterEventDataToGlobeData","_x2","_handlePolygonLoad","_callee3","_context3","res","landTopo","topojson","objects","land","features","App","VisualizeApp_VisualizeApp","href","reportWebVitals","onPerfEntry","Function","__webpack_require__","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.f225a85f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport class ScrollBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"scrollBarWrapper\">\r\n                    {this.props.items.map(item => (\r\n                        <VenueItem ticketLink={item.url}zoomFunc={this.props.zoomFunc} date={item.datetime_local} venue={item.venue} key={item.id}></VenueItem>\r\n                    ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass VenueItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick() {\r\n        this.props.zoomFunc(this.props.venue.location.lat, this.props.venue.location.lon);\r\n    }\r\n\r\n    openInNewTab = url => {\r\n        window.open(url, '_blank', 'noopener,noreferrer');\r\n    };\r\n\r\n    render() {\r\n        let date = new Date(this.props.date + \"Z\");\r\n        let shortMonthName = new Intl.DateTimeFormat(\"en-US\", { month: \"short\" }).format;\r\n        const localClockTime = date.toLocaleString(\"en-US\", {\r\n            hour: \"numeric\",\r\n            minute: \"numeric\",\r\n            hour12: true,\r\n           });\r\n        let monthName = shortMonthName(date); // \"Jul\"\r\n        return (\r\n            <div>\r\n                <div className=\"venueInfoBox\" onClick={this.handleClick}><span>{this.props.venue.name} ({this.props.venue.city} - {this.props.venue.state})</span><br /><span className=\"dateText\">{monthName} {date.getDay()}, {localClockTime}</span>\r\n                </div>\r\n                <div onClick={() => this.openInNewTab(this.props.ticketLink)} className=\"showTicketBox\">\r\n                    <span>Book Tickets</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Globe from 'react-globe.gl';\r\nimport * as THREE from 'three';\r\n\r\nexport class World extends React.Component {\r\n  constructor(props) {\r\n      super(props);\r\n  }\r\n\r\n  render() {\r\n    const polygonsMaterial = new THREE.MeshBasicMaterial({ color: '#EFDFDD', side: THREE.DoubleSide });\r\n    return <Globe \r\n        ref={this.props.worldRef}\r\n        pathsData={this.props.points}\r\n        showGlobe={false}\r\n        showAtmosphere={false}\r\n        polygonsData={this.props.polygons}\r\n        polygonCapMaterial={polygonsMaterial}\r\n        pathPoints=\"coords\"\r\n        pathPointLat={p => p[0]}\r\n        pathPointLng={p => p[1]}\r\n        pathDashGap={1}\r\n        pathDashAnimateTime={60000}\r\n        pathDashLength={0.02}\r\n        pathStroke={3}\r\n        pathPointAlt={0.02}\r\n        pathColor={path => path.color}\r\n        backgroundColor=\"rgba(0,0,0,0)\"\r\n        polygonSideColor={() => 'rgba(0, 0, 0, 0)'}\r\n        labelsData={this.props.labels}\r\n        labelLat={label => label.lat}\r\n        labelLng={label => label.lng}\r\n        labelText={label => label.name}\r\n        labelSize={() => 0.15}\r\n        labelDotRadius={() => 0.25}\r\n        labelResolution={2}\r\n        labelAltitude = {0.018}\r\n        labelColor={label => label.color}\r\n    />;\r\n  }\r\n};","import React from 'react';\r\nimport {getQueryStringForEventsByPerformer} from './artistSearch.js';\r\nimport {ScrollBar} from'./components/ScrollBar.js';\r\nimport {World} from'./components/World.js';\r\nimport * as topojson from 'topojson';\r\n\r\nconst ZOOM_ANIM_TIME = 1000;\r\nconst ZOOM_ALT =  0.25;\r\n\r\n\r\nexport class VisualizeApp extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { events: [], eventsPathData: [], propsData: [], polygonData: [], eventsLabelData: [], resultErrorString: \"\" };\r\n      this.worldRef = React.createRef(); \r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n      this.zoomToVenue = this.zoomToVenue.bind(this);\r\n    }\r\n  \r\n    zoomToVenue(lat, lng) {\r\n      const targetLocation = { lat: lat, lng: lng, altitude: ZOOM_ALT };\r\n      const node = this.worldRef.current;\r\n      node.pointOfView(targetLocation, ZOOM_ANIM_TIME);\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.handlePolygonLoad();\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div className='visualSpace'>\r\n          <ScrollBar zoomFunc={this.zoomToVenue} items={this.state.events} />\r\n          <div id=\"searchSection\">\r\n            <h3>Event Tour Visualizer</h3>\r\n            <form onSubmit={this.handleSubmit}>\r\n              <input\r\n                id=\"new-todo\"\r\n                onChange={this.handleChange}\r\n                value={this.state.text}\r\n                placeholder={\"Search band/team!\"}\r\n              />\r\n              <button>\r\n                Search\r\n              </button>\r\n            </form>\r\n            <button onClick={() => this.handleButtonPress(\"Twenty One Pilots\")}>\r\n              Twenty One Pilots\r\n            </button>\r\n            <button onClick={() => this.handleButtonPress(\"Panic at the Disco\")}>\r\n              Panic At The Disco\r\n            </button>\r\n            <button  onClick={() => this.handleButtonPress(\"FC Barcelona\")}>\r\n              FC Barcelona\r\n            </button>\r\n            <button onClick={() => this.handleButtonPress(\"Seattle Mariners\")}>\r\n              Seattle Mariners\r\n            </button>\r\n            <div>\r\n              <span className='errorMessage'>\r\n                {this.state.resultErrorString}\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <World worldRef={this.worldRef} points={this.state.eventsPathData} labels={this.state.eventsLabelData} polygons={this.state.polygonData}/>\r\n        </div>\r\n      );\r\n    }\r\n  \r\n    handleButtonPress = (event) => {\r\n      this.setState({ text: event });\r\n      this.handleButtonSubmit(event);\r\n    }\r\n\r\n    filterEventDataToGlobeData(eventData, label) {\r\n      let pathData = [];\r\n      let cordData = [];\r\n      let labelData = [];\r\n      let pathColorString = \"#4717F6\";\r\n      let labelColorString = \"#A239CA\";\r\n      let lastLat = 0;\r\n      let lastLon = 0;\r\n      for (let i = 0; i <  eventData.length; i++) {\r\n        let lat = eventData[i].venue.location.lat;\r\n        let lon = eventData[i].venue.location.lon;\r\n        if (!(lat === lastLat && lon === lastLon)) {\r\n          cordData.push([lat, lon]);\r\n          labelData.push({\"lat\" : lat, \"lng\" : lon, \"name\" : eventData[i].venue.name, \"color\" : labelColorString})\r\n          lastLat = lat;\r\n          lastLon =  lon;\r\n        }\r\n      }\r\n      pathData = [{\"coords\" : cordData, \"color\" : pathColorString, \"name\" : label}]\r\n\r\n      console.log(pathData)\r\n      return {\"pathData\" : pathData, \"labelData\" : labelData};\r\n    }\r\n\r\n    handleChange(e) {\r\n      this.setState({ text: e.target.value });\r\n    }\r\n  \r\n    async handleSubmit(e) {\r\n      if (e) {\r\n        e.preventDefault();\r\n      }\r\n      await this.handleButtonSubmit(this.state.text);\r\n    }\r\n\r\n    async handleButtonSubmit(text) {\r\n      if (text.length === 0) {\r\n        return;\r\n      }\r\n      let queryString = getQueryStringForEventsByPerformer(text);\r\n      const response =\r\n        await fetch(queryString)\r\n          .then(function(response) {\r\n              return response.json();\r\n          })\r\n          .then(function(myJson) {\r\n            return myJson.events;\r\n          })\r\n        .catch(function(err) {\r\n              console.log(err);\r\n        });\r\n      let globeData = this.filterEventDataToGlobeData(response, text);\r\n      if (globeData.labelData[0]) {\r\n        this.zoomToVenue(globeData.labelData[0].lat, globeData.labelData[0].lng);\r\n      }\r\n      else {\r\n        this.setState(state => ({\r\n          resultErrorString: \"no results for: \"+ text + \" 😔\",\r\n        }));\r\n        return;\r\n      }\r\n      this.setState(state => ({\r\n        events: response,\r\n        eventsPathData: globeData.pathData,\r\n        eventsLabelData: globeData.labelData,\r\n        text: ''\r\n      }));\r\n\r\n    }\r\n\r\n    async handlePolygonLoad() {\r\n      const response =\r\n        await fetch('//unpkg.com/world-atlas/land-110m.json').then(res => res.json())\r\n        .then(landTopo => {\r\n          this.setState(state => ({\r\n            polygonData: topojson.feature(landTopo, landTopo.objects.land).features,\r\n          }));\r\n        });\r\n    }\r\n}","let seatGeakRequestHandler =  function(inputString, ){\r\n\tconst baseURL = 'https://api.seatgeek.com/2/events?performers.slug='; // Get 10 random users\r\n\tconst clientString = '&per_page=100&client_id=MTgzNjYzMjF8MTU2ODI1NTkzNS41OA';\r\n\treturn baseURL+inputString+clientString;\r\n}\r\n\r\nexport {seatGeakRequestHandler}","let cleanSentence = function(value) {\r\n\tlet lowerCaseStrings = value.toLowerCase().split(\" \");\r\n\tvar result = \"\";\r\n\tfor (var i = 0; i < lowerCaseStrings.length; i++ ){\r\n\t\tif (i !== 0) {\r\n\t\t\tresult+=\"-\";\r\n\t\t}\r\n\t\tresult+= lowerCaseStrings[i];\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nexport {cleanSentence};","import {cleanSentence} from './inputSanitizer.js';\r\nimport {seatGeakRequestHandler} from './seatGeakRequestHandler.js';\r\n\r\nlet getQueryStringForEventsByPerformer = function(queryValue, eventsHolder) {\r\n    return seatGeakRequestHandler(cleanSentence(queryValue, eventsHolder));\r\n  }\r\n\r\nexport {getQueryStringForEventsByPerformer}\r\n\r\n","import './App.css';\nimport {VisualizeApp} from './VisualizeApp.js'\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VisualizeApp />\n      <div className='attribution'>\n          Made with{' '}\n          <a href='https://platform.seatgeek.com/' className='technology'>\n            Seatgeak API, \n          </a> {' '}\n          <a href='https://threejs.org/' className='technology'>\n            Three.js, \n          </a>{' '}\n           and {' '}\n          <a href='https://reactjs.org/' className='technology'>\n            React. \n          </a>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}